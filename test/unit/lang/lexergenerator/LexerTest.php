<?php
/**
 * Unit tests for AP5L_Lang_LexerGenerator_Lexer.
 *
 * @version $Id: LexerGeneratorLexerTest.php 246683 2007-11-22 04:43:52Z instance $
 */

// Set up to call main if this file is executed directly.
if (! defined('PHPUnit_MAIN_METHOD')) {
    define('PHPUnit_MAIN_METHOD', 'LexerGeneratorLexerTest::main');
}

require_once 'PHPUnit/Framework.php';

$base = dirname(__FILE__);
$base = str_replace('\\', '/', $base);
while (! class_exists('AP5L', false)) {
    $lib = $base . '/src/AP5L.php';
    if (file_exists($lib)) {
        require_once $lib;
        AP5L::install();
        break;
    }
    if ($base == dirname($base)) {
        echo 'Unable to find AP5L';
        exit(1);
    }
    $base = dirname($base);
}

require_once 'LexerOutputRecorder.php';

/**
 * Tests for the LexerGenerator.
 *
 * This class contains tests that verify either the PHP code generated by a
 * lexer definition, or verify the code and the operation of the generated
 * lexer.
 * @version @package_version@
 */
class LexerGeneratorLexerTest extends PHPUnit_Framework_TestCase {
    public $basePath;
    public $dataPath;
    public $writeTestNames;

    /**
     * Runs the test methods of this class.
     *
     */
    public static function main() {
        require_once 'PHPUnit/TextUI/TestRunner.php';

        $suite  = new PHPUnit_Framework_TestSuite(__CLASS__);
        $result = PHPUnit_TextUI_TestRunner::run($suite);
    }

    public function setUp() {
        $this -> basePath = dirname(__FILE__) . DIRECTORY_SEPARATOR;
        $this -> dataPath = $this -> basePath . 'data' . DIRECTORY_SEPARATOR;
        $this -> writeTestNames = false;
    }

    public function testEmptyFile() {
        if ($this -> writeTestNames) {
            echo __METHOD__ . ' ';
        }
        $recorder = new LexerOutputRecorder();
        $testResult = $recorder -> process('data', '');
        $expected = '{"output":"","states":[],"errors":[]}';
        $this->assertEquals(json_encode($testResult), $expected);
    }

    public function testMinimalLexer() {
        if ($this -> writeTestNames) {
            echo __METHOD__ . ' ';
        }
        $recorder = new LexerOutputRecorder();
        $testResult = $recorder -> process('file', $this -> dataPath . 'MinimalLexer.plex');
        $expected = file_get_contents($this -> dataPath . 'MinimalLexer.expect.dat');
        $this->assertEquals(json_encode($testResult), $expected);
    }

    public function testDeclareEquals() {
        if ($this -> writeTestNames) {
            echo __METHOD__ . ' ';
        }
        $recorder = new LexerOutputRecorder();
        $testResult = $recorder -> process('file', $this -> dataPath . 'DeclareEquals.plex');
        $expected = file_get_contents($this -> dataPath . 'DeclareEquals.expect.dat');
        $this->assertEquals(json_encode($testResult), $expected);
    }

    public function testComments() {
        if ($this -> writeTestNames) {
            echo __METHOD__ . ' ';
        }
        $recorder = new LexerOutputRecorder();
        $testResult = $recorder -> process('file', $this -> dataPath . 'Comments.plex');
        $expected = file_get_contents($this -> dataPath . 'Comments.expect.dat');
        $this->assertEquals(json_encode($testResult), $expected);
    }

    }

// Call main if this file is executed directly.
if (PHPUnit_MAIN_METHOD == 'LexerGeneratorLexerTest::main') {
    LexerGeneratorLexerTest::main();
}
